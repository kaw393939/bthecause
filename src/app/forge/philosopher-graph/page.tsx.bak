'use client';

import React, { useState, useEffect } from 'react';
import { Box, Container, Typography, useTheme } from '@mui/material';
import PhilosopherGraph, { PhilosopherData, Philosopher } from '@/components/Graph/PhilosopherGraph';
import { GraphControls } from '@/components/Graph/controls/GraphControls';
import LayoutControls from '@/components/Graph/controls/LayoutControls';
import SearchBar from '@/components/Graph/controls/SearchBar';
import AnalyticsModal from '@/components/Graph/analytics/AnalyticsModal';

export default function PhilosopherGraphPage() {
  const theme = useTheme();
  
  // State management
  const [graphData, setGraphData] = useState<PhilosopherData>({ nodes: [], links: [] });
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedNode, setSelectedNode] = useState<Philosopher | null>(null);
  const [showAnalytics, setShowAnalytics] = useState<boolean>(false);
  const [physicsEnabled, setPhysicsEnabled] = useState<boolean>(true);
  const [selectedLayout, setSelectedLayout] = useState<string>('force');
  const [zoomLevel, setZoomLevel] = useState<number>(1);
  
  // Load graph data from JSON file
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await fetch('/data/philosophers.json');
        
        if (!response.ok) {
          throw new Error(`Failed to load data: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        setGraphData(data);
      } catch (err) {
        console.error('Error loading graph data:', err);
        setError(err instanceof Error ? err.message : 'Unknown error loading graph data');
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, []);
  
  // Handle node selection
  const handleNodeClick = (node: Philosopher) => {
    setSelectedNode(node);
  };
  
  // Handle zoom controls
  const handleZoomIn = () => {
    setZoomLevel(prev => Math.min(prev + 0.2, 3));
  };
  
  const handleZoomOut = () => {
    setZoomLevel(prev => Math.max(prev - 0.2, 0.3));
  };
  
  const handleResetView = () => {
    setZoomLevel(1);
  };
  
  // Handle layout changes
  const handleLayoutChange = (layout: string) => {
    setSelectedLayout(layout);
  };
  
  // Handle physics toggle
  const handlePhysicsToggle = (enabled: boolean) => {
    setPhysicsEnabled(enabled);
  };
  
  // Handle refresh
  const handleRefresh = () => {
    // Reset the simulation by toggling physics
    setPhysicsEnabled(false);
    setTimeout(() => setPhysicsEnabled(true), 50);
  };
  
  // Handle analytics toggle
  const handleToggleAnalytics = () => {
    setShowAnalytics(prev => !prev);
  };
  
  // Calculate window dimensions
  const [dimensions, setDimensions] = useState({ 
    width: typeof window !== 'undefined' ? window.innerWidth : 1200, 
    height: typeof window !== 'undefined' ? window.innerHeight : 800 
  });
  
  useEffect(() => {
    const handleResize = () => {
      setDimensions({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  if (loading) {
    return (
      <Box 
        sx={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          height: '100vh',
          flexDirection: 'column',
          gap: 2
        }}
      >
        <Typography variant="h5">Loading Philosopher Network...</Typography>
        <Box sx={{ width: 300, height: 4, bgcolor: 'background.paper', borderRadius: 2, overflow: 'hidden' }}>
          <Box
            sx={{
              width: '30%',
              height: '100%',
              bgcolor: 'primary.main',
              borderRadius: 2,
              animation: 'pulse 1.5s infinite',
              '@keyframes pulse': {
                '0%': {
                  transform: 'translateX(-100%)',
                },
                '100%': {
                  transform: 'translateX(400%)',
                },
              },
            }}
          />
        </Box>
      </Box>
    );
  }
  
  if (error) {
    return (
      <Box 
        sx={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          height: '100vh',
          flexDirection: 'column',
          gap: 2,
          p: 3
        }}
      >
        <Typography variant="h5" color="error">Error Loading Graph</Typography>
        <Typography>{error}</Typography>
      </Box>
    );
  }
  
  return (
    <Box sx={{ 
      position: 'relative', 
      width: '100%', 
      height: '100vh',
      bgcolor: theme.palette.mode === 'dark' ? '#121212' : '#f5f5f5',
      overflow: 'hidden'
    }}>
      {/* Main Graph Visualization */}
      <PhilosopherGraph
        width={dimensions.width}
        height={dimensions.height}
        data={graphData}
        onNodeClick={handleNodeClick}
        physicsEnabled={physicsEnabled}
        selectedLayout={selectedLayout}
        zoomLevel={zoomLevel}
      />
      
      {/* Layout Controls */}
      <LayoutControls
        selectedLayout={selectedLayout}
        onLayoutChange={handleLayoutChange}
        physicsEnabled={physicsEnabled}
        onPhysicsToggle={handlePhysicsToggle}
        onRefresh={handleRefresh}
        onAnalytics={handleToggleAnalytics}
      />
      
      {/* Search Bar */}
      <Box sx={{ position: 'absolute', top: 16, right: 16, zIndex: 1000 }}>
        <SearchBar
          data={graphData.nodes}
          onSelect={handleNodeClick}
        />
      </Box>
      
      {/* Zoom Controls */}
      <GraphControls
        onZoomIn={handleZoomIn}
        onZoomOut={handleZoomOut}
        onReset={handleResetView}
        onToggleAnalytics={handleToggleAnalytics}
        showingAnalytics={showAnalytics}
        position="bottom-right"
      />
      
      {/* Node Details Panel */}
      {selectedNode && (
        <Box
          sx={{
            position: 'absolute',
            bottom: 16,
            left: 16,
            width: 350,
            bgcolor: 'background.paper',
            borderRadius: 2,
            boxShadow: 3,
            p: 2,
            zIndex: 1000,
            maxHeight: '40vh',
            overflow: 'auto'
          }}
        >
          <Typography variant="h6" gutterBottom>
            {selectedNode.name}
          </Typography>
          <Typography variant="subtitle2" color="text.secondary" gutterBottom>
            {selectedNode.era} Era â€¢ Influence Score: {selectedNode.influenceScore.toFixed(1)}
          </Typography>
          <Typography variant="body2" paragraph>
            {selectedNode.description}
          </Typography>
          <Typography variant="subtitle2" gutterBottom>
            Key Contributions:
          </Typography>
          <ul style={{ margin: 0, paddingLeft: 20 }}>
            {selectedNode.contributions.map((contribution, index) => (
              <li key={index}>
                <Typography variant="body2">{contribution}</Typography>
              </li>
            ))}
          </ul>
        </Box>
      )}
      
      {/* Analytics Modal */}
      <AnalyticsModal
        open={showAnalytics}
        onClose={() => setShowAnalytics(false)}
        data={graphData}
      />
    </Box>
  );
}
